[{"categories":["tech"],"content":"安装 Hugo 可参考Hugo 官方的 Quick Start ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:1:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"安装二进制（Mac） # 使用brew安装hugo brew install hugo # 创建新项目（网站） hugo new site my_website # 生成用于发布的静态文件（不包含草稿） hugo # 生成用于发布的静态文件（包括草稿） hugo -D # 本地运行网站 hugo server ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:1:1","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"直接使用 Docker # 创建新项目（网站） docker run --rm -it \\ -v $(pwd):/src \\ klakegg/hugo \\ new site my_website # 生成用于发布的静态文件（不包含草稿） docker run --rm -it \\ -v $(pwd):/src \\ klakegg/hugo # 生成用于发布的静态文件（包括草稿） docker run --rm -it \\ -v $(pwd):/src \\ klakegg/hugo -D # 本地运行网站 docker run --rm -it \\ -v $(pwd):/src \\ -p 1313:1313 \\ klakegg/hugo \\ server 可以在镜像后面增加版本号，指定使用的hugo版本 # 比如 docker run --rm -it \\ -v $(pwd):/src \\ klakegg/hugo:0.82.0 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:1:2","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"安装 LoveIt 主题 # 位于你的博客项目根目录 git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 代码克隆成功后在./themes文件夹下应出现LoveIt文件夹。 引用 详细可参考LoveIt 官方文档 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:2:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"项目文件树结构 . ├── archetypes # markdown文章的模版 ├── config.toml # 配置文件 ├── content # 网站内容，主要保存文章 ├── data # 生成网站可用的数据文件，可用在模版中 ├── layouts # 生成网站时可用的模版 ├── public # 通过hugo命令生成的静态文件，主要发布这个 ├── resources # 通过hugo命令一起生成的资源文件，暂时不知道什么用 ├── static # 静态文件，比如文章中的图片/视频文件、缩略图等 └── themes # 保存可用的hugo主题 通常，我们只会用到以下几个文件夹的东西 config.toml ：保存 hugo 的配置，包括主题的配置等。详细设置见下方 #网站配置 content：保存网站的各种内容，比如文章。 archetypes： 保存文章的 markdown 模版，通常包括文章的前缀注释，是一些在创建新文章时会被用到。 static ：保存文章中用到的静态文件，比如图片、网站缩略图等。 public ：通过hugo命令生成的静态 html 文件、css、js 等。在服务器上发布时主要发布这个文件夹。 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:3:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"配置网站设置 配置文件位置：./config.toml 引用 具体的配置条目参考LoveIt 官方文档 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:4:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"配置缩略图 使用的网站：https://realfavicongenerator.net/ 获取缩略图的各种格式 下载到的全部内容\" 下载到的全部内容 将整个压缩包的文件（包括图片之外的文件）放到./static下 重启浏览器，应该可以看到标签上的缩略图出现了。 浏览器标签出现缩略图\" 浏览器标签出现缩略图 缩略图没生效？ 缩略图未生效的原因可能是浏览器使用了之前的缓存。尝试： 彻底关闭并重启浏览器。 通过这个步骤强制删除缓存。 强制 Chrome 禁用网页缓存。 打开 Chrome 开发者工具。（网页空白处右键-检查，或者按 F12） 在Network栏勾选Disable cache。 或者在设置里找到Preferences -\u003e Network -\u003e Disable cache ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:5:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"开始写第一篇文章 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:6:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"文章前缀参数 在每篇 markdown 文章最前面可以用一部分注释来告诉LoveIt主题，这篇文章的属性，譬如文章标签、分类、是否为草稿等。 引用 详细可参考LoveIt 官方文档 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:6:1","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"将文章前缀参数保存在 markdown 模版中 模版文件位置：./archetypes/default.md 我使用的md模版 --- title: \"{{ replace .TranslationBaseName \"-\" \" \" | title }}\" subtitle: \"\" date: {{ .Date }} draft: true tags: [] categories: [] hiddenFromHomePage: false hiddenFromSearch: false featuredImage: \"\" featuredImagePreview: \"\" license: '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' --- ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:6:2","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"生成新文章 生成新文章的命令： hugo new posts/文章标题.md 执行完成后，在./content/posts目录下应该可以看到新文件，同时里面已经有 markdown 模版中的文章前缀参数。 技巧 也可以手动复制旧文章来生成新文章，不通过命令。 也可以在content文件夹下建新的文件夹，方便管理。这种情况下生成的静态 Html 文件路由效果如下： . └── content └── about | └── index.md // \u003c- https://example.com/about/ ├── posts | ├── firstpost.md // \u003c- https://example.com/posts/firstpost/ | ├── happy | | └── ness.md // \u003c- https://example.com/posts/happy/ness/ | └── secondpost.md // \u003c- https://example.com/posts/secondpost/ └── quote ├── first.md // \u003c- https://example.com/quote/first/ └── second.md // \u003c- https://example.com/quote/second/ ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:6:3","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"本地调试 本地调试命令： hugo server --disableFastRender 本地运行网站\" 本地运行网站 出现成功的提示后在浏览器打开http://localhost:1313即可看到网站。 Bug 如果你看到如图的编译错误，可能是因为你的文章除了前缀参数外没有任何内容。随便写几句话就可以解决这个问题。 有文章为空时的编译报错\" 有文章为空时的编译报错 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:6:4","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"创建 Github 仓库 个人建议创建两个仓库： 一个用于托管博客项目源文件，包括配置文件等包含后续可能配置 API KEY 的东西。设置权限为 Private（不公开） 一个用于托管博客编译后生成的静态 Html 文件(即使用 hugo 命令编译生成的public文件夹)，并配置该仓库使用 Github Pages，然后 Github 就会自动检测到它其中的静态Html文件并搭建网站。设置权限为 Public（公开） ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:7:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"第一个仓库 按照常规方式创建仓库即可，反正设置为private权限等级，也没人看得见。 第一个仓库示例，保存博客源代码\" 第一个仓库示例，保存博客源代码 链接本地仓库与远端仓库 ## 位于博客源代码根目录 ## 初始化本地Git仓库 git init ## 设置名为Origin的远端Git仓库 git remote add origin {{这里替换成你的仓库在Github Clone用的地址}} ## 选择所有文件 git add -A ## Push到github git push -u origin master 创建.gitignore 在源代码项目中创建.gitignore文件，来防止把生成的静态文件上传。创建位置如下： . ├── .git ├── .github ├── .gitignore \u003c---- 在根目录下 ├── README.md ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── public ├── resources ├── static └── themes 在.gitignore中写入/public，来防止 Git 将其上传。 cat .gitignore ## 输出 /public ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:7:1","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"第二个仓库 创建仓库，注意名称 第二个仓库名字比较重要，必须是{{你的github用户名}}.github.io。 比如我的 Github 名字为JellyZhang,那么我需要创建的仓库名称为JellyZhang.github.io，如图所示。 第二个仓库示例（注意仓库名称与自己用户名对应）\" 第二个仓库示例（注意仓库名称与自己用户名对应） 在仓库设置里设置启用Github Pages 找到仓库设置\" 找到仓库设置 找到Pages一栏\" 找到Pages一栏 设置Branch与静态文件位置\" 设置Branch与静态文件位置 这个地方设置Branch为master，静态文件位置为/(root)，原因是我们在下个步骤中会直接将生成的public文件夹中的内容push到master分支的/目录下。 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:7:2","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"给源代码仓库添加 Github Action ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"创建 CI 脚本 什么是Github Action? Github Action 是 Github 提供的 CI 系统，可以让用户编写脚本，并在触发指定的操作后（比如新 commit push 到仓库），自动触发脚本。它可以： 编译项目 测试项目 登陆远程服务器 发布服务 等等…… 在源代码项目根目录下新建.github/workflow/main.yml。(通过 Github Action 网页端操作也可以) . ├── .git ├── .github │ └── workflows │ └── main.yml \u003c---在这里创建 ├── .gitignore ├── README.md ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── public ├── resources ├── static └── themes main.yml脚本内容： # This is a basic workflow to help you get started with Actionsname:CI# Controls when the action will run.on:# Triggers the workflow on push or pull request events but only for the master branchpush:branches:[master]pull_request:branches:[master]# Allows you to run this workflow manually from the Actions tabworkflow_dispatch:# A workflow run is made up of one or more jobs that can run sequentially or in paralleljobs:# This workflow contains a single job called \"build\"build:# The type of runner that the job will run onruns-on:ubuntu-latest# Steps represent a sequence of tasks that will be executed as part of the jobsteps:# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Hugo setup# You may pin to the exact commit or the version.# uses: peaceiris/actions-hugo@2e89aa66d0093e4cd14751b3028fc1a179452c2euses:peaceiris/actions-hugo@v2.4.13with:# The Hugo version to download (if necessary) and use. Example: 0.58.2hugo-version:latest# optional, default is latest# Download (if necessary) and use Hugo extended version. Example: trueextended:true# optional, default is false- name:Buildrun:hugo- name:Pushes to another repositoryuses:cpina/github-action-push-to-another-repository@masterenv:API_TOKEN_GITHUB:${{ secrets.API_TOKEN_GITHUB }}with:source-directory:\"public\"destination-github-username:\"这里输入你的Github用户名\"destination-repository-name:\"这里输入你的Github用户名.github.io\"user-email:这里输入你的Github邮箱需要自定义的部分 注意on里的 branch 是否和自己的相同，因为现在 Github 默认分支为 main。 同时最后三行内容需要自行替换。 脚本主要做了以下事情： 创建一个 Hugo 环境 使用 hugo 命令编译代码，产生 public 文件夹 将 public 文件 push 到你的Github用户名.github.io仓库。（也就是你之前创建的第二个仓库） ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:1","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"设置 Push 用的密钥 为了让 Github Action 脚本有权限将代码 Push 到我们的xx.github.io仓库，我们需要申请一个密钥并告诉它。在 Github 设置中找到Developer settings/Personal access tokens 个人密钥设置界面\" 个人密钥设置界面 新建一个密钥，权限设置把Repo打勾。 新建密钥\" 新建密钥 回到第一个仓库的设置里，选择Secrets（密钥） 仓库密钥设置\" 仓库密钥设置 新建密钥，将刚才生成的个人密钥填进去，名字设为API_TOKEN_GITHUB(跟 CI 脚本里的名称对应即可) 新建仓库密钥\" 新建仓库密钥 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:2","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"观察效果 在 Push 新修改到第一个仓库后，在Action界面可以看到新的workflow开始运行了。 第一个仓库workflow界面（图中已经完成）\" 第一个仓库workflow界面（图中已经完成） 在workflow结束后，可以在第二个仓库看到新的Push 第二个仓库自动push了新的静态页面\" 第二个仓库自动push了新的静态页面 在等待 1-2 分钟后，即可在xx.github.io观察到变化。 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:3","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"配置评论系统 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:9:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"GitTalk GitTalk是基于 github 的 repo issues 作为数据库来存储评论的。 Love-It主题集成了GitTalk ，需要使用的话只需要在config.toml里填写指定信息就可以了。 首先要去Github -\u003e Settings -\u003e Developer Settings -\u003e OAuth App 里注册一个新的 OAuth App 来给 Gitalk 使用。 两个 Url 填自己博客的地址就行。 注册OAuth App\" 注册OAuth App 修改config.toml: [params.page.comment] enable = true \u003c-- 启用评论系统 ... [params.page.comment.gitalk] enable = true owner = \"JellyZhang\" \u003c-- Github用户名 repo = \"blog-comment\" \u003c-- 用来存放评论的repo名称 clientId = \"\" \u003c-- 申请好的OAuth的ClientId clientSecret = \"\" \u003c-- 申请好的OAuth的ClientSecret 升级Gitalk来防止403问题 Gitalk 1.6.2版本 存在一个自身 Bug，它里面用到了一个链接来依赖某个下游，而事实上这个链接是 demo 演示用的，已经因为滥用被取消了，所以需要将 LoveIt 主题使用的 1.6.2 版本改成1.7.2 修改./themes/LoveIt/assets/data/cdn/jsdelivr.yml中的Gitalk的链接： ...metingJS:meting@2.0.1/dist/Meting.min.js# gitalk@1.6.2 https://github.com/gitalk/gitalkgitalkCSS:gitalk@1.7.2/dist/gitalk.min.css \u003c-- 改为1.7.2gitalkJS:gitalk@1.7.2/dist/gitalk.min.js \u003c-- 改为1.7.2# valine@1.4.14 https://valine.js.org/valineJS:valine@1.4.14/dist/Valine.min.js... 在本地环境看不到生效？ 评论系统在本地运行时不生效，需要 publish 后查看效果。 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:9:1","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"配置搜索系统 LoveIt集成了两种搜索引擎，Lunr和algolia。 两种搜索引擎的区别 参考LoveIt 官方文档 lunr: 简单, 无需同步 index.json, 没有 contentLength 的限制, 但占用带宽大且性能低 (特别是中文需要一个较大的分词依赖库) algolia: 高性能并且占用带宽低, 但需要同步 index.json 且有 contentLength 的限制 我这里记录algolia的配置方法。 首先需要在配置文件中新增Outputs的JSON类型，用于产生index.json文件来提供给搜索引擎。 config.toml: [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] 设置后，在使用hugo命令编译后应该可以在public文件夹下找到index.json 之后在algolia注册账号并创建一个application与index: 创建application, freePlan一般够用\" 创建application, freePlan一般够用 然后在API Keys里找到appID和searchKey: 在API Keys里找到appId与searchKey\" 在API Keys里找到appId与searchKey config.toml: [languages.zh-cn.params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"algolia\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [languages.zh-cn.params.search.algolia] index = \"\" \u003c--- 你创建的index的名字 appID = \"\" \u003c--- Application ID searchKey = \"\" \u003c--- Search-Only API Key 然后可以上传生成的index.json到 algolia 来生成索引，实现搜索功能。 手动上传index.json的方法\" 手动上传index.json的方法 当然，每次生成完上传index.json未免太过麻烦，况且我们还是用Github Action来自动编译的，因此接下来我们让Github Action来帮我们上传index.json到algolia。 首先生成一个 Admin API Key 用于调用 API 来上传 index.json: 生成Admin API Key\" 生成Admin API Key 然后修改我们的Github Action的脚本： 在`main.yml`末尾加上：- name:Algolia Index Uploader# You may pin to the exact commit or the version.# uses: rxrw/algolia-index-uploader@294d1d600c4a2197a64903b6161cc80acea1becbuses:rxrw/algolia-index-uploader@v1with:# Your Algolia IndexPathindex_path:public/index.json \u003c-- 生成的index.json位置，默认即可# Algolia Index Idalgolia_index_id:XXXXXXXXX \u003c-- 你的indexId, 即之前获得的`application ID`# Algolia Index Namealgolia_index_name:XXXX \u003c--- 你创建的index名字# Algolia Admin Keyalgolia_index_admin_key:XXXXXXXXXXXX \u003c--- 上图中获取的admin Key之后运行脚本即可在algolia在 dashboard 里看到新增的记录。 algolia新增了record\" algolia新增了record 删除文章后需要删除旧Record 每次上传的记录是增量的，意味着不会清除旧的记录。 因此如果删除了发布过的旧文章，需要手动去algolia网站上清理相关的 Object。（也可以使用 Clear 功能全部清除） ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:10:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"配置 Google Analytics 网站分析 Google analytics是将用户的动作行为收集后发送到 Google，交由 Google 进行统计与分析，形成看板。 在Google analytics创建媒体资源 –\u003e 添加数据流 –\u003e 网站，之后在数据流详情里获取到衡量ID: 获取衡量ID\" 获取衡量ID 之后可以在Dashboard里查看网站的用户行为，有很多内容可以慢慢探索。 Google analytics Dashboard\" Google analytics Dashboard ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:11:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"配置 Google Search Console 首先确定自己的站点地图有正常生成。打开/sitemap.xml链接： sitemap\" sitemap 之后在Google Search Console里填写自己站点地图的链接，可以帮助谷歌爬虫了解网站结构。 上传sitemap\" 上传sitemap 显示`无法获取`? 事实上是没有问题的，谷歌可能有点延迟。可以在bing webmaster tool 导入 Google 的设置，可以看到 bing 是可以立即获取的。 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:12:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"参考文献 LoveIt 官方文档 Hugo 官方文档 刷新 Chrome 缓存 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:13:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"效率开发工具 ","date":"2021-04-16","objectID":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/:0:0","tags":["工具"],"title":"效率开发工具","uri":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/"},{"categories":["tech"],"content":"HammerSpoon (macos) HammerSpoon 是 Macos 下的一款开源的可编程脚本软件，支持以 API 的形式让用户来编写可操作系统的脚本。用一张图来概括： hammerSpoon Usage\" hammerSpoon Usage 图片中未列出的其他操作，包括但不限于： 以屏幕为画布来画图 弹出对话框让用户选择选项 搭建一个简易 Http 服务器 让你的音乐软件（Spotify、Vox）等暂停、下一曲。 展现一个网页内容 …… 总而言之， 基于 lua 脚本语言。https://learnxinyminutes.com/docs/lua/ fast app switch ALT + 单个键组合快速切换 APP my config： 设备管理（监听、触发） 音频设备 键盘、鼠标（map keys like vim in non-vim env） USB 系统设备监听 wifi event、usb event、audio device event 窗口管理 app 自带的 Application Script 其他 API network、timer、httpserver、dialog…… 可编写自己的状态栏应用 通过系统 api 获取定位 通过免费的天气预报来获取天气信息 通过 alertAPI 来用气泡提醒 more actions…… 剪贴板历史 its ability is only limited by your imagination some ideas 在插入 usb 鼠标时，更改系统的滚轮策略 连接、断开 wifi 时播出指定的音乐 定时将 workspace 里的 git 项目都 commit、push 来存档 一键输出当前时间戳 。。。 some links https://www.v2ex.com/t/553241 https://sspai.com/post/53992 https://zhuanlan.zhihu.com/p/72499152 ","date":"2021-04-16","objectID":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/:1:0","tags":["工具"],"title":"效率开发工具","uri":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/"},{"categories":["tech"],"content":"vim use neovim in 2020 (neovim 可视为 vim 的超集、modern vim) vim vs IDE pros： fast typing、 words edit 支持自定义脚本 轻量级，可在服务器运行 得益于微软 lsp（ Language Server Protocol）的推行，vim 的编程提示方面可以做到与 IDE 一样的体验 基本上你需要的 IDE 功能，都有人实现过相应的 vim 插件 cons： 调试 debug 不太方便，最好依赖本地 ide 的远程调试功能 复制不太利索 建议的 vim mapping ijkl instead of hjkl 配套的 hammerSpoon 设置 vim in chrome extension： vimium pros： 可满足简单的无鼠标浏览网页 支持修改 mapping cons: 复杂的网页操作仍然需要鼠标、没有鼠标快 vim in IDE pros：能 work 及简单的 mapping cons：不支持自定义的插件 vim in everything 大部分 commandLine tool，若里面有涉及到“选择”、“光标移动”等，都是 hjkl 的默认配置。(tmux 等) 习惯 vim 后会想把快捷键思维代入其他软件 some links 推荐入门视频：https://www.bilibili.com/video/BV164411P7tw ","date":"2021-04-16","objectID":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/:1:1","tags":["工具"],"title":"效率开发工具","uri":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/"},{"categories":["tech"],"content":"效率之谈 shortcut key \u003e mouse leftside keyboard \u003e rightside keyboard 尽可能地将双手保持在左侧区域。 右手切换到鼠标、方向键再切换回来耗时巨大。 apprroachs vim hammerSpoon map keys like vim （alt + ijkl) ","date":"2021-04-16","objectID":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/:1:2","tags":["工具"],"title":"效率开发工具","uri":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/"},{"categories":["tech"],"content":"typora + 免费图床 pros： 所见即所得，即时渲染的 markdown 免费图床：摆脱 markdown 自身不保存资源的劣势 ","date":"2021-04-16","objectID":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/:1:3","tags":["工具"],"title":"效率开发工具","uri":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/"},{"categories":["tech"],"content":"docker container as dev-env 防止本身的环境装太多软件，太乱。 使用 Dockerfile 来搭建一个符合你要求的开发环境 使用 docker 的 volumn 功能来将本地的项目文件映射到容器的 workspace 中 ","date":"2021-04-16","objectID":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/:1:4","tags":["工具"],"title":"效率开发工具","uri":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/"},{"categories":["tech"],"content":"commandLine tools fzf：模糊查找 ranger：命令行中的文件资源管理器 tmux：终端会话工具 ","date":"2021-04-16","objectID":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/:1:5","tags":["工具"],"title":"效率开发工具","uri":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/"},{"categories":["tech"],"content":"坚果云 作为备份云盘 pros： 国内环境下网速较好 支持全平台 app 支持版本回滚 免费版个人使用足够 ","date":"2021-04-16","objectID":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/:1:6","tags":["工具"],"title":"效率开发工具","uri":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91/"},{"categories":[],"content":"前因 笔者的牙齿自幼便健康度不足。原因有二： 一方面是自身原因，未认识到口腔健康的重要性，经常不刷牙就上床睡觉了。 另一方面是家庭原因，在口腔健康这一点上并未受到严厉的束缚。 以上两个原因使得我在高中时便进了牙科诊所。 说到牙科诊所，有一段趣事。 第一个诊所是我妈妈在高中后门一堆居民楼里找的私家诊所。补完牙后我喝水不塞牙了，惊呼技术高超。 第二个诊所是家附近比较大的牙科诊所，里面的医生说我上次去的医院很不正规，给我撬掉重新补了。 第三个诊所是北京大学校医院，里面的医生说我上次去的医院很不正规，导致我现在需要做根管治疗了。 从我个人经历来看，个人认为牙齿这种贴肉长的、伴随终身的东西，还是尽量去正规的诊所好一点。 在研究生阶段，我已经从牙齿的种种迹象（冷水漱口刺激感）隐隐发现不对劲了 🤨。 但是秋招在即，上班也忙，于是给自己立了 Flag 🚩 在秋招与毕业论文尘埃落定后再去应付牙齿问题。 然而一件事件把这一切都早早提上了日程…… part of me\" part of me 在作死买了一罐话梅后，一次吃话梅的过程中我一颗烂牙的一部分掉了下来。 最初我以为是话梅质量问题，结果一摸牙齿光秃秃的，十分骇人。接着就不得不开启我长达几个月的根管治疗的旅途。 （后来才知道，牙齿不疼不代表还没深入牙髓。可能是牙髓已经烂完了） ","date":"2021-04-16","objectID":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/:1:0","tags":["dailylife"],"title":"根管治疗与口腔卫生","uri":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/"},{"categories":[],"content":"根管治疗 ","date":"2021-04-16","objectID":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/:2:0","tags":["dailylife"],"title":"根管治疗与口腔卫生","uri":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/"},{"categories":[],"content":"牙齿与龋齿 牙齿结构\" 牙齿结构 牙齿结构从外到内分为牙釉质、牙本质与牙髓。 按照龋病的深入的状态，分为浅龋、中龋、 深龋，继而引发 牙髓炎。 龋齿恶化过程\" 龋齿恶化过程 ","date":"2021-04-16","objectID":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/:2:1","tags":["dailylife"],"title":"根管治疗与口腔卫生","uri":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/"},{"categories":[],"content":"龋病的病因 龋齿成因\" 龋齿成因 龋齿的产生主要由以下四个元素组成： 细菌。人一出生就有口腔细菌，同时随着食物的摄入也会带来大量细菌。 其中大部分是对人体健康无害的，但是其中也有会导致龋齿的细菌。 食物。龋齿菌种比如乳酸链球菌等细菌，它们代谢糖类后会产生能腐蚀牙齿的酸性物质，然后酸性物质与细菌、食物残渣和唾液结合，形成牙菌斑，进而腐蚀牙釉质。 宿主。宿主也就是自然牙。如果将牙齿全换成烤瓷牙，那么得变成龋齿的概率将大大减小。 时间。细菌是一种微生物，而我们的牙齿是人体最坚硬的器官，固然龋齿并非一朝一夕可成。因此我们保持良好的刷牙习惯，不断将细菌冲掉，也可以显著预防龋齿的形成。 ","date":"2021-04-16","objectID":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/:2:2","tags":["dailylife"],"title":"根管治疗与口腔卫生","uri":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/"},{"categories":[],"content":"什么情况下需要根管治疗？ 当龋齿伤及牙髓引发牙髓炎的时候。绝大多数的牙髓炎都不能自行消除，如治疗不及时，还会进一步引起根尖周炎等其他更严重的后果。 ","date":"2021-04-16","objectID":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/:2:3","tags":["dailylife"],"title":"根管治疗与口腔卫生","uri":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/"},{"categories":[],"content":"根管治疗的过程 根管治疗疼吗？ 我每次治疗都打了麻药，基本没什么感觉。据没打麻药的人说十分痛苦。 ","date":"2021-04-16","objectID":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/:2:4","tags":["dailylife"],"title":"根管治疗与口腔卫生","uri":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/"},{"categories":[],"content":"根管治疗的后续：牙冠 牙冠\" 牙冠 牙冠是一种被套在牙齿顶部、以牙料粘胶或沾合剂固定的修复物。牙冠可以将牙齿修复至原来的大小、形状和颜色，并加强现有牙齿的结构。 牙冠虽然主要用于补牙、根管治疗后的防护措施，但因其也可以用于美容，因此属于医疗美容范畴，保险报销较少。 牙冠主要有三种： 金属铸造冠（外部金属） 金属铸造冠\" 金属铸造冠 优点： 便宜 缺点： 难看 金属异味 影响头部核磁共振 金属烤瓷冠（外烤瓷内金属） 金属烤瓷冠\" 金属烤瓷冠 优点： 便宜 美观 缺点： 易崩瓷 价格因使用的材料不同而相差很大，大致价格（来源网上，以实际为准）：1000 ～ 6000 RMB 全瓷冠（全部瓷材料） 全瓷冠\" 全瓷冠 优点： 坚固 美观 无刺激 不影响核磁共振 缺点： 贵 价格因使用的材料不同而相差很大，大致价格（来源网上，以实际为准）：4000 ～ 9000 RMB 根管治疗后的牙齿无敌了吗？ 如果之后保持良好的口腔卫生与定期口腔护理，那么也可以使用终身。 但是失去了确保牙齿活力的牙髓后，牙齿会变得更脆弱并且更容易断裂，尽可能安装牙冠来保护牙齿。 ","date":"2021-04-16","objectID":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/:2:5","tags":["dailylife"],"title":"根管治疗与口腔卫生","uri":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/"},{"categories":[],"content":"医疗报销 医保看牙不同于看其他病症，自费比例较高，一般报销比例约为 50%左右。 根据国家目前医疗报销的规定，牙体治疗费、手术费牙科治疗纳入医保范围的主要是： 补牙（基本的材料和治疗费） 根管治疗 拔牙 牙周治疗 牙龈炎等牙病 无法报销的部分，主要是牙齿美容类项目： 镶牙 烤瓷牙 洗牙 牙齿矫正 种植牙等等 北京牙科报销范围与标准 北京牙科报销范围和标准： 在定点医院就诊才能报销 纳入医保范围内的项目才能报销 医保仅报销 1800 元以上，医保范围内费用的 80%。 校医院的报销比例应该是较高的。 从我个人经历来看： 洗牙从 100 ～ 200 报销后花了 30+ RMB 根管治疗报销了 2/3 左右，学校报销后只花了 690 RMB。（不包括牙冠部分） ","date":"2021-04-16","objectID":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/:2:6","tags":["dailylife"],"title":"根管治疗与口腔卫生","uri":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/"},{"categories":[],"content":"口腔预防 ","date":"2021-04-16","objectID":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/:3:0","tags":["dailylife"],"title":"根管治疗与口腔卫生","uri":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/"},{"categories":[],"content":"如何简单检查自己的牙齿是否有问题 观察吃冷热食物是否有刺激感 是否有否有黑斑 去洗牙并在洗牙时问医生(👍) ","date":"2021-04-16","objectID":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/:3:1","tags":["dailylife"],"title":"根管治疗与口腔卫生","uri":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/"},{"categories":[],"content":"正确的刷牙姿势 ","date":"2021-04-16","objectID":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/:3:2","tags":["dailylife"],"title":"根管治疗与口腔卫生","uri":"/%E6%A0%B9%E7%AE%A1%E6%B2%BB%E7%96%97%E4%B8%8E%E5%8F%A3%E8%85%94%E5%8D%AB%E7%94%9F/"}]