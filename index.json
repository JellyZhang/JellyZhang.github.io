[{"categories":["tech"],"content":"安装 Hugo 可参考Hugo 官方的 Quick Start ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:1:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"安装二进制（Mac） # 使用brew安装hugo brew install hugo # 创建新项目（网站） hugo new site my_website # 生成用于发布的静态文件（不包含草稿） hugo # 生成用于发布的静态文件（包括草稿） hugo -D # 本地运行网站 hugo server ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:1:1","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"直接使用 Docker # 创建新项目（网站） docker run --rm -it \\ -v $(pwd):/src \\ klakegg/hugo \\ new site my_website # 生成用于发布的静态文件（不包含草稿） docker run --rm -it \\ -v $(pwd):/src \\ klakegg/hugo # 生成用于发布的静态文件（包括草稿） docker run --rm -it \\ -v $(pwd):/src \\ klakegg/hugo -D # 本地运行网站 docker run --rm -it \\ -v $(pwd):/src \\ -p 1313:1313 \\ klakegg/hugo \\ server 可以在镜像后面增加版本号，指定使用的hugo版本 # 比如 docker run --rm -it \\ -v $(pwd):/src \\ klakegg/hugo:0.82.0 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:1:2","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"安装 LoveIt 主题 # 位于你的博客项目根目录 git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 代码克隆成功后在./themes文件夹下应出现LoveIt文件夹。 引用 详细可参考LoveIt 官方文档 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:2:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"项目文件树结构 . ├── archetypes # markdown文章的模版 ├── config.toml # 配置文件 ├── content # 网站内容，主要保存文章 ├── data # 生成网站可用的数据文件，可用在模版中 ├── layouts # 生成网站时可用的模版 ├── public # 通过hugo命令生成的静态文件，主要发布这个 ├── resources # 通过hugo命令一起生成的资源文件，暂时不知道什么用 ├── static # 静态文件，比如文章中的图片/视频文件、缩略图等 └── themes # 保存可用的hugo主题 通常，我们只会用到以下几个文件夹的东西 config.toml ：保存 hugo 的配置，包括主题的配置等。详细设置见下方 #网站配置 content：保存网站的各种内容，比如文章。 archetypes： 保存文章的 markdown 模版，通常包括文章的前缀注释，是一些在创建新文章时会被用到。 static ：保存文章中用到的静态文件，比如图片、网站缩略图等。 public ：通过hugo命令生成的静态 html 文件、css、js 等。在服务器上发布时主要发布这个文件夹。 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:3:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"配置网站设置 配置文件位置：./config.toml 引用 具体的配置条目参考LoveIt 官方文档 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:4:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"配置缩略图 使用的网站：https://realfavicongenerator.net/ 获取缩略图的各种格式 下载到的全部内容\" 下载到的全部内容 将整个压缩包的文件（包括图片之外的文件）放到./static下 重启浏览器，应该可以看到标签上的缩略图出现了。 浏览器标签出现缩略图\" 浏览器标签出现缩略图 缩略图没生效？ 缩略图未生效的原因可能是浏览器使用了之前的缓存。尝试： 彻底关闭并重启浏览器。 通过这个步骤强制删除缓存。 强制 Chrome 禁用网页缓存。 打开 Chrome 开发者工具。（网页空白处右键-检查，或者按 F12） 在Network栏勾选Disable cache。 或者在设置里找到Preferences -\u003e Network -\u003e Disable cache ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:5:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"开始写第一篇文章 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:6:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"文章前缀参数 在每篇 markdown 文章最前面可以用一部分注释来告诉LoveIt主题，这篇文章的属性，譬如文章标签、分类、是否为草稿等。 引用 详细可参考LoveIt 官方文档 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:6:1","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"将文章前缀参数保存在 markdown 模版中 模版文件位置：./archetypes/default.md 我使用的md模版 --- title: \"{{ replace .TranslationBaseName \"-\" \" \" | title }}\" subtitle: \"\" date: {{ .Date }} draft: true tags: [] categories: [] hiddenFromHomePage: false hiddenFromSearch: false featuredImage: \"\" featuredImagePreview: \"\" license: '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' --- ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:6:2","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"生成新文章 生成新文章的命令： hugo new posts/文章标题.md 执行完成后，在./content/posts目录下应该可以看到新文件，同时里面已经有 markdown 模版中的文章前缀参数。 技巧 也可以手动复制旧文章来生成新文章，不通过命令。 也可以在content文件夹下建新的文件夹，方便管理。这种情况下生成的静态 Html 文件路由效果如下： . └── content └── about | └── index.md // \u003c- https://example.com/about/ ├── posts | ├── firstpost.md // \u003c- https://example.com/posts/firstpost/ | ├── happy | | └── ness.md // \u003c- https://example.com/posts/happy/ness/ | └── secondpost.md // \u003c- https://example.com/posts/secondpost/ └── quote ├── first.md // \u003c- https://example.com/quote/first/ └── second.md // \u003c- https://example.com/quote/second/ ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:6:3","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"本地调试 本地调试命令： hugo server --disableFastRender 本地运行网站\" 本地运行网站 出现成功的提示后在浏览器打开http://localhost:1313即可看到网站。 Bug 如果你看到如图的编译错误，可能是因为你的文章除了前缀参数外没有任何内容。随便写几句话就可以解决这个问题。 有文章为空时的编译报错\" 有文章为空时的编译报错 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:6:4","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"创建 Github 仓库 个人建议创建两个仓库： 一个用于托管博客项目源文件，包括配置文件等包含后续可能配置 API KEY 的东西。设置权限为 Private（不公开） 一个用于托管博客编译后生成的静态 Html 文件(即使用 hugo 命令编译生成的public文件夹)，并配置该仓库使用 Github Pages，然后 Github 就会自动检测到它其中的静态Html文件并搭建网站。设置权限为 Public（公开） ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:7:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"第一个仓库 按照常规方式创建仓库即可，反正设置为private权限等级，也没人看得见。 第一个仓库示例，保存博客源代码\" 第一个仓库示例，保存博客源代码 链接本地仓库与远端仓库 ## 位于博客源代码根目录 ## 初始化本地Git仓库 git init ## 设置名为Origin的远端Git仓库 git remote add origin {{这里替换成你的仓库在Github Clone用的地址}} ## 选择所有文件 git add -A ## Push到github git push -u origin master 创建.gitignore 在源代码项目中创建.gitignore文件，来防止把生成的静态文件上传。创建位置如下： . ├── .git ├── .github ├── .gitignore \u003c---- 在根目录下 ├── README.md ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── public ├── resources ├── static └── themes 在.gitignore中写入/public，来防止 Git 将其上传。 cat .gitignore ## 输出 /public ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:7:1","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"第二个仓库 创建仓库，注意名称 第二个仓库名字比较重要，必须是{{你的github用户名}}.github.io。 比如我的 Github 名字为JellyZhang,那么我需要创建的仓库名称为JellyZhang.github.io，如图所示。 第二个仓库示例（注意仓库名称与自己用户名对应）\" 第二个仓库示例（注意仓库名称与自己用户名对应） 在仓库设置里设置启用Github Pages 找到仓库设置\" 找到仓库设置 找到Pages一栏\" 找到Pages一栏 设置Branch与静态文件位置\" 设置Branch与静态文件位置 这个地方设置Branch为master，静态文件位置为/(root)，原因是我们在下个步骤中会直接将生成的public文件夹中的内容push到master分支的/目录下。 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:7:2","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"给源代码仓库添加 Github Action ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"创建 CI 脚本 什么是Github Action? Github Action 是 Github 提供的 CI 系统，可以让用户编写脚本，并在触发指定的操作后（比如新 commit push 到仓库），自动触发脚本。它可以： 编译项目 测试项目 登陆远程服务器 发布服务 等等…… 在源代码项目根目录下新建.github/workflow/main.yml。(通过 Github Action 网页端操作也可以) . ├── .git ├── .github │ └── workflows │ └── main.yml \u003c---在这里创建 ├── .gitignore ├── README.md ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── public ├── resources ├── static └── themes main.yml脚本内容： # This is a basic workflow to help you get started with Actionsname:CI# Controls when the action will run.on:# Triggers the workflow on push or pull request events but only for the master branchpush:branches:[master]pull_request:branches:[master]# Allows you to run this workflow manually from the Actions tabworkflow_dispatch:# A workflow run is made up of one or more jobs that can run sequentially or in paralleljobs:# This workflow contains a single job called \"build\"build:# The type of runner that the job will run onruns-on:ubuntu-latest# Steps represent a sequence of tasks that will be executed as part of the jobsteps:# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Hugo setup# You may pin to the exact commit or the version.# uses: peaceiris/actions-hugo@2e89aa66d0093e4cd14751b3028fc1a179452c2euses:peaceiris/actions-hugo@v2.4.13with:# The Hugo version to download (if necessary) and use. Example: 0.58.2hugo-version:latest# optional, default is latest# Download (if necessary) and use Hugo extended version. Example: trueextended:true# optional, default is false- name:Buildrun:hugo- name:Pushes to another repositoryuses:cpina/github-action-push-to-another-repository@masterenv:API_TOKEN_GITHUB:${{ secrets.API_TOKEN_GITHUB }}with:source-directory:\"public\"destination-github-username:\"这里输入你的Github用户名\"destination-repository-name:\"这里输入你的Github用户名.github.io\"user-email:这里输入你的Github邮箱需要自定义的部分 注意on里的 branch 是否和自己的相同，因为现在 Github 默认分支为 main。 同时最后三行内容需要自行替换。 脚本主要做了以下事情： 创建一个 Hugo 环境 使用 hugo 命令编译代码，产生 public 文件夹 将 public 文件 push 到你的Github用户名.github.io仓库。（也就是你之前创建的第二个仓库） ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:1","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"设置 Push 用的密钥 为了让 Github Action 脚本有权限将代码 Push 到我们的xx.github.io仓库，我们需要申请一个密钥并告诉它。在 Github 设置中找到Developer settings/Personal access tokens 个人密钥设置界面\" 个人密钥设置界面 新建一个密钥，权限设置把Repo打勾。 新建密钥\" 新建密钥 回到第一个仓库的设置里，选择Secrets（密钥） 仓库密钥设置\" 仓库密钥设置 新建密钥，将刚才生成的个人密钥填进去，名字设为API_TOKEN_GITHUB(跟 CI 脚本里的名称对应即可) 新建仓库密钥\" 新建仓库密钥 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:2","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"观察效果 在 Push 新修改到第一个仓库后，在Action界面可以看到新的workflow开始运行了。 第一个仓库workflow界面（图中已经完成）\" 第一个仓库workflow界面（图中已经完成） 在workflow结束后，可以在第二个仓库看到新的Push 第二个仓库自动push了新的静态页面\" 第二个仓库自动push了新的静态页面 在等待 1-2 分钟后，即可在xx.github.io观察到变化。 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:8:3","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"配置评论系统 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:9:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"GitTalk GitTalk是基于 github 的 repo issues 作为数据库来存储评论的。 Love-It主题集成了GitTalk ，需要使用的话只需要在config.toml里填写指定信息就可以了。 首先要去Github -\u003e Settings -\u003e Developer Settings -\u003e OAuth App 里注册一个新的 OAuth App 来给 Gitalk 使用。 两个 Url 填自己博客的地址就行。 注册OAuth App\" 注册OAuth App 修改config.toml: [params.page.comment] enable = true \u003c-- 启用评论系统 ... [params.page.comment.gitalk] enable = true owner = \"JellyZhang\" \u003c-- Github用户名 repo = \"blog-comment\" \u003c-- 用来存放评论的repo名称 clientId = \"\" \u003c-- 申请好的OAuth的ClientId clientSecret = \"\" \u003c-- 申请好的OAuth的ClientSecret 升级Gitalk来防止403问题 Gitalk 1.6.2版本 存在一个自身 Bug，它里面用到了一个链接来依赖某个下游，而事实上这个链接是 demo 演示用的，已经因为滥用被取消了，所以需要将 LoveIt 主题使用的 1.6.2 版本改成1.7.2 修改./themes/LoveIt/assets/data/cdn/jsdelivr.yml中的Gitalk的链接： ...metingJS:meting@2.0.1/dist/Meting.min.js# gitalk@1.6.2 https://github.com/gitalk/gitalkgitalkCSS:gitalk@1.7.2/dist/gitalk.min.css \u003c-- 改为1.7.2gitalkJS:gitalk@1.7.2/dist/gitalk.min.js \u003c-- 改为1.7.2# valine@1.4.14 https://valine.js.org/valineJS:valine@1.4.14/dist/Valine.min.js... 在本地环境看不到生效？ 评论系统在本地运行时不生效，需要 publish 后查看效果。 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:9:1","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"配置搜索系统 LoveIt集成了两种搜索引擎，Lunr和algolia。 两种搜索引擎的区别 参考LoveIt 官方文档 lunr: 简单, 无需同步 index.json, 没有 contentLength 的限制, 但占用带宽大且性能低 (特别是中文需要一个较大的分词依赖库) algolia: 高性能并且占用带宽低, 但需要同步 index.json 且有 contentLength 的限制 我这里记录algolia的配置方法。 首先需要在配置文件中新增Outputs的JSON类型，用于产生index.json文件来提供给搜索引擎。 config.toml: [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] 设置后，在使用hugo命令编译后应该可以在public文件夹下找到index.json 之后在algolia注册账号并创建一个application与index: 创建application, freePlan一般够用\" 创建application, freePlan一般够用 然后在API Keys里找到appID和searchKey: 在API Keys里找到appId与searchKey\" 在API Keys里找到appId与searchKey config.toml: [languages.zh-cn.params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"algolia\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [languages.zh-cn.params.search.algolia] index = \"\" \u003c--- 你创建的index的名字 appID = \"\" \u003c--- Application ID searchKey = \"\" \u003c--- Search-Only API Key 然后可以上传生成的index.json到 algolia 来生成索引，实现搜索功能。 手动上传index.json的方法\" 手动上传index.json的方法 当然，每次生成完上传index.json未免太过麻烦，况且我们还是用Github Action来自动编译的，因此接下来我们让Github Action来帮我们上传index.json到algolia。 首先生成一个 Admin API Key 用于调用 API 来上传 index.json: 生成Admin API Key\" 生成Admin API Key 然后修改我们的Github Action的脚本： 在`main.yml`末尾加上：- name:Algolia Index Uploader# You may pin to the exact commit or the version.# uses: rxrw/algolia-index-uploader@294d1d600c4a2197a64903b6161cc80acea1becbuses:rxrw/algolia-index-uploader@v1with:# Your Algolia IndexPathindex_path:public/index.json \u003c-- 生成的index.json位置，默认即可# Algolia Index Idalgolia_index_id:XXXXXXXXX \u003c-- 你的indexId, 即之前获得的`application ID`# Algolia Index Namealgolia_index_name:XXXX \u003c--- 你创建的index名字# Algolia Admin Keyalgolia_index_admin_key:XXXXXXXXXXXX \u003c--- 上图中获取的admin Key之后运行脚本即可在algolia在 dashboard 里看到新增的记录。 algolia新增了record\" algolia新增了record ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:10:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"配置 Google Analytics 网站分析 Google analytics是将用户的动作行为收集后发送到 Google，交由 Google 进行统计与分析，形成看板。 在Google analytics创建媒体资源 –\u003e 添加数据流 –\u003e 网站，之后在数据流详情里获取到衡量ID: 获取衡量ID\" 获取衡量ID 之后可以在Dashboard里查看网站的用户行为，有很多内容可以慢慢探索。 Google analytics Dashboard\" Google analytics Dashboard ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:11:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"参考文献 LoveIt 官方文档 Hugo 官方文档 刷新 Chrome 缓存 ","date":"2021-04-16","objectID":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/:12:0","tags":["博客","hugo"],"title":"使用Hugo+LoveIt主题搭建博客","uri":"/%E4%BD%BF%E7%94%A8hugo-loveit%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["tech"],"content":"效率开发工具 ","date":"2021-04-16","objectID":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91-typora-%E5%9B%BE%E5%BA%8A/:0:0","tags":["工具","hugo"],"title":"效率开发工具（1）","uri":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91-typora-%E5%9B%BE%E5%BA%8A/"},{"categories":["tech"],"content":"hammerSpoon (macos) ​ hammerSpoon 是Macos下的一款开源的可编程脚本软件，支持以API的形式让用户来编写可操作系统的脚本。用一张图来概括： {{}} graph LR begin[你可以] –\u003e A begin –\u003e B begin –\u003e C begin –\u003e D begin –\u003e E A[“监听键盘指令(快捷键)\"] –\u003e mid[然后你可以…] B[监听鼠标/触控板指令] –\u003e mid C[“监听系统设备状态的变更(USB的插入、Wifi的连接)\"] –\u003e mid D[设定定时器] –\u003e mid E[……] –\u003e mid mid –\u003e a[打开一个应用] mid –\u003e b[通过网络查询当天天气情况] mid –\u003e c[“修改系统设置(音量等)\"] mid –\u003e d[“调整应用的窗口大小、布局”] mid –\u003e e[通过AppleScript来执行应用自带脚本] mid –\u003e f[……] 图片中未列出的其他操作，包括但不限于： - 以屏幕为画布来画图 - 弹出对话框让用户选择选项 - 搭建一个简易Http服务器 - 让你的音乐软件（Spotify、Vox）等暂停、下一曲。 - 展现一个网页内容 - …… 总而言之， - 基于lua脚本语言。https://learnxinyminutes.com/docs/lua/ - fast app switch ![image-20210507212356276](https://gitee.com/JellyZhang_55ee/blogpic/raw/master/img/image-20210507212356276.png) ALT + 单个键组合快速切换APP my config： ![image-20201216233133535](https://tva1.sinaimg.cn/large/0081Kckwly1glq499c5j3j30hq0acwfv.jpg) - 设备管理（监听、触发） - 音频设备 - 键盘、鼠标（map keys like vim in non-vim env） - USB - 系统设备监听 - wifi event、usb event、audio device event - 窗口管理 - app自带的Application Script - 其他API - network、timer、httpserver、dialog…… - 可编写自己的状态栏应用 - ![image-20201216204657010](https://tva1.sinaimg.cn/large/0081Kckwly1glpzhzda8nj30dk05p40j.jpg) - 通过系统api获取定位 - 通过免费的天气预报来获取天气信息 - 通过alertAPI来用气泡提醒 - more actions…… - 剪贴板历史 ![image-20201216205000122](https://tva1.sinaimg.cn/large/0081Kckwly1glq28fvz5oj30e407p74w.jpg) - its ability is only limited by your imagination - some ideas - 在插入usb鼠标时，更改系统的滚轮策略 - 连接、断开wifi时播出指定的音乐 - 定时将workspace里的git项目都commit、push来存档 - 一键输出当前时间戳 - 。。。 - some links - https://www.v2ex.com/t/553241 - https://sspai.com/post/53992 - https://zhuanlan.zhihu.com/p/72499152 ### vim - use [neovim](https://github.com/neovim/neovim) in 2020 (neovim 可视为vim的超集、modern vim) - vim vs IDE - pros： - fast typing、 words edit - 支持自定义脚本 - 轻量级，可在服务器运行 - 得益于微软lsp（ *Language Server Protocol*）的推行，vim的编程提示方面可以做到与IDE一样的体验 - 基本上你需要的IDE功能，都有人实现过相应的vim插件 - cons： - 调试debug不太方便，最好依赖本地ide的远程调试功能 - 复制不太利索 - 建议的vim mapping - ijkl instead of hjkl - 配套的hammerSpoon设置 - vim in chrome - extension： vimium - pros： - 可满足简单的无鼠标浏览网页 - 支持修改mapping - cons: - 复杂的网页操作仍然需要鼠标、没有鼠标快 - vim in IDE - pros：能work及简单的mapping - cons：不支持自定义的插件 - vim in everything - 大部分commandLine tool，若里面有涉及到“选择”、“光标移动”等，都是hjkl的默认配置。(tmux等) - 习惯vim后会想把快捷键思维代入其他软件 - some links - 推荐入门视频：https://www.bilibili.com/video/BV164411P7tw ### 效率之谈 - shortcut key \u003e mouse - leftside keyboard \u003e rightside keyboard - ![image-20201216210914287](https://tva1.sinaimg.cn/large/0081Kckwly1glq054z087j30la07ugsq.jpg) - 尽可能地将双手保持在左侧区域。 - 右手切换到鼠标、方向键再切换回来耗时巨大。 - apprroachs - vim - hammerSpoon map keys like vim （alt + ijkl) ![Testimonial for ergoemacs-mode](https://tva1.sinaimg.cn/large/0081Kckwly1glq1u3b4qij30e8078wff.jpg) ### typora + 免费图床 - pros： - 所见即所得，即时渲染的markdown - 免费图床：摆脱markdown自身不保存资源的劣势 ### docker container as dev-env - 防止本身的环境装太多软件，太乱。 - 使用Dockerfile来搭建一个符合你要求的开发环境 - 使用docker的volumn功能来将本地的项目文件映射到容器的workspace中 ### commandLine tools - fzf：模糊查找 ![img](https://tva1.sinaimg.cn/large/0081Kckwly1glq17x2zc7j31c00u0442.jpg) - ranger：命令行中的文件资源管理器 ![multiple panes](https://tva1.sinaimg.cn/large/0081Kckwly1glq1a56bv5j30fn08saiz.jpg) - tmux：终端会话工具 ### 坚果云 - 作为备份云盘 - pros： - 国内环境下网速较好 - 支持全平台app - 支持版本回滚 - 免费版个人使用足够 ","date":"2021-04-16","objectID":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91-typora-%E5%9B%BE%E5%BA%8A/:0:1","tags":["工具","hugo"],"title":"效率开发工具（1）","uri":"/%E6%95%88%E7%8E%87%E5%BC%80%E5%8F%91-typora-%E5%9B%BE%E5%BA%8A/"}]